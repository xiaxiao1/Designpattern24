



桥梁模式（Bridge Pattern） 也叫做桥接模式， 是一个比较简单的模式， 其定义如下：
Decouple an abstraction from its implementation so that the two can vary independently.（将抽象和
实现解耦， 使得两者可以独立地变化。 ）
桥梁模式的重点是在“解耦”上， 如何让它们两者解耦是我们要了解的重点

解耦：
    抽象角色引用实现角色，
或者说：
    抽象角色的部分实现是由实现角色完成的。


    为什么要增加一个构造函数？ 答案是为了提醒子类， 你必须做这项工
    作， 指定实现者， 特别是已经明确了实现者， 则尽量清晰明确地定义出来。



    ！！！！！！！！！！！！！解耦！！！！！！！！！！！！！！！！！！！！


优点：
    抽象和实现分离
    这也是桥梁模式的主要特点， 它完全是为了解决继承的缺点而提出的设计模式。 在该模
    式下， 实现可以不受抽象的约束， 不用再绑定在一个固定的抽象层次上。
    ● 优秀的扩充能力
    看看我们的例子， 想增加实现？ 没问题！ 想增加抽象， 也没有问题！ 只要对外暴露的接
    口层允许这样的变化， 我们已经把变化的可能性减到最小。
    ● 实现细节对客户透明
    客户不用关心细节的实现， 它已经由抽象层通过聚合关系完成了封装


注意：
    桥梁模式是非常简单的， 使用该模式时主要考虑如何#拆分抽象和实现#， 并不是一涉及继
    承就要考虑使用该模式， 那还要继承干什么呢？ 桥梁模式的意图还是对变化的封装， 尽量把
    可能变化的因素封装到最细、 最小的逻辑单元中， 避免风险扩散。 因此读者在进行系统设计
    时， 发现类的继承有N层时， 可以考虑使用桥梁模式。

    对于比较明确不发生变
    化的， 则通过继承来完成； 若不能确定是否会发生变化的， 那就认为是会发生变化， 则通过
    桥梁模式来解决， 这才是一个完美的世界。