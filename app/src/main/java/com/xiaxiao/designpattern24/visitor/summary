



定义：
    访问者模式（Visitor Pattern） 是一个相对简单的模式， 其定义如下： Represent an
    operation to be performed on the elements of an object structure. Visitor lets you define a new
    operation without changing the classes of the elements on which it operates. （封装一些作用于某种
    数据结构中的各元素的操作， 它可以在不改变数据结构的前提下定义作用于这些元素的新的
    操作。 ）


优点：
    ● 符合单一职责原则
    具体元素角色也就是Employee抽象类的两个子类负责数据的加载， 而Visitor类则负责报
    表的展现， 两个不同的职责非常明确地分离开来， 各自演绎变化。
    ● 优秀的扩展性
    由于职责分开， 继续增加对数据的操作是非常快捷的， 例如， 现在要增加一份给大老板
    的报表， 这份报表格式又有所不同， 直接在Visitor中增加一个方法， 传递数据后进行整理打
    印。
    ● 灵活性非常高
     扩展性和灵活性都是对visitor来说的，即同样的数据，可以很灵活的做不同的操作


缺点：
    ● 具体元素对访问者公布细节访问者要访问一个类就必然要求这个类公布一些方法和数据， 也就是说访问者关注了其
    他类的内部细节， 这是迪米特法则所不建议的。
    ● 具体元素变更比较困难
    具体元素角色的增加、 删除、 修改都是比较困难的， 就上面那个例子， 你想想， 你要是
    想增加一个成员变量， 如年龄age， Visitor就需要修改， 如果Visitor是一个还好办， 多个呢？
    业务逻辑再复杂点呢？
    ● 违背了依赖倒置转原则
    访问者依赖的是具体元素， 而不是抽象元素， 这破坏了依赖倒置原则， 特别是在面向对
    象的编程中， 抛弃了对接口的依赖， 而直接依赖实现类， 扩展比较难。