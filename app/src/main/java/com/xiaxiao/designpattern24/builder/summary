



建造者模式（Builder Pattern） 也叫做生成器模式， 其定义如下：
    Separate the construction of a complex object from its representation so that the same
    construction process can create different representations.（将一个复杂对象的构建与它的表示分
    离， 使得同样的构建过程可以创建不同的表示。 ）

    构建与表示分离



角色：

    在建造者模式中， 有如下4个角色：
    ● Product产品类
    通常是实现了模板方法模式， 也就是有模板方法和基本方法
    ● Builder抽象建造者
    规范产品的组建， 一般是由子类实现。 例子中的CarBuilder就属于抽象建造者。
    ● ConcreteBuilder具体建造者实现抽象类定义的所有方法， 并且返回一个组建好的对象。 例子中的BenzBuilder和
    BMWBuilder就属于具体建造者。
    ● Director导演类
    负责安排已有模块的顺序， 然后告诉Builder开始建造，

    导演类起到封装的作用， 避免高层模块深入到建造者内部的实现类。 当然， 在建造者模
    式比较庞大时， 导演类可以有多个




优点：

    ● 封装性
    使用建造者模式可以使客户端不必知道产品内部组成的细节， 如例子中我们就不需要关
    心每一个具体的模型内部是如何实现的， 产生的对象类型就是CarModel。
    ● 建造者独立， 容易扩展
    BenzBuilder和BMWBuilder是相互独立的， 对系统的扩展非常有利。
    ● 便于控制细节风险
    由于具体的建造者是独立的， 因此可以对建造过程逐步细化， 而不对其他的模块产生任
    何影响


适用场景：

    ● 相同的方法， 不同的执行顺序， 产生不同的事件结果时， 可以采用建造者模式。
    ● 多个部件或零件， 都可以装配到一个对象中， 但是产生的运行结果又不相同时， 则可
    以使用该模式。
    ● 产品类非常复杂， 或者产品类中的调用顺序不同产生了不同的效能， 这个时候使用建
    造者模式非常合适

    总而言之，场景就是：产品类的某种顺序，导致不同的结果


特点：

    建造者模式关注的是零件类型和装配工艺（顺序） ， 这是它与工厂方法模式最大不同的
    地方， 虽然同为创建类模式， 但是注重点不同。

    还是强调的顺序！！  顺序！  为解决顺序而存在

实践：
    结合模版方法模式使用更佳




















