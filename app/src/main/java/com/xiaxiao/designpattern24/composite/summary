

描述的是部分与整体的关系


    组合模式(Composite Pattern)也叫合成模式， 有时又叫做部分-整体模式（Part-Whole） ，
    主要是用来描述部分与整体的关系， 其定义如下：
    Compose objects into tree structures to represent part-whole hierarchies.Composite lets clients
    treat individual objects and compositions of objects uniformly.（将对象组合成树形结构以表
    示“部分-整体”的层次结构， 使得用户对单个对象和组合对象的使用具有一致性。）



优点：
    ● 高层模块调用简单
    一棵树形机构中的所有节点都是Component， 局部和整体对调用者来说没有任何区别，
    也就是说， 高层模块不必关心自己处理的是单个对象还是整个组合结构， 简化了高层模块的
    代码。
    ● 节点自由增加
    使用了组合模式后， 我们可以看看， 如果想增加一个树枝节点、 树叶节点是不是都很容
    易， 只要找到它的父节点就成， 非常容易扩展， 符合开闭原则， 对以后的维护非常有利。


缺点：
    组合模式有一个非常明显的缺点， 看到我们在场景类中的定义， 提到树叶和树枝使用时
    的定义了吗？ 直接使用了实现类！ 这在面向接口编程上是很不恰当的， 与依赖倒置原则冲
    突， 读者在使用的时候要考虑清楚， 它限制了你接口的影响范围。

    这算是个缺点吗，我写的这个例子应该不存在吧，不管是树叶还是树枝 唯一的区别就是有没有孩子啊，
    所以树叶和树枝遵循的协议应该是一致的。


    难道说少女和少妇的实例，要写一个接口，再分别两个实现类吗，唯一的区别就是有没有丈夫？



使用：
    维护和展示部分-整体关系的场景， 如树形菜单、 文件和文件夹管理。
    ● 从一个整体中能够独立出部分模块或功能的场景