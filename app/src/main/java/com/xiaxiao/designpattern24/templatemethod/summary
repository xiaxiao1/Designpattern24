

    模板方法模式的重点核心应该是钩子方法。
    钩子方法的存在，使得模版方法具有了整体框架不变，具体步骤可变的特性


    在软件开发过程中， 如果相同的一段代码复制过两次， 就需要对设计产生怀疑，
    架构师要明确地说明为什么相同的逻辑要出现两次或更多次。

定义：
    Define the skeleton of an algorithm in an operation,deferring some steps to subclasses.Template
    Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's
    structure.（定义一个操作中的算法的框架， 而将一些步骤延迟到子类中。 使得子类可以不改
    变一个算法的结构即可重定义该算法的某些特定步骤。 ）


    AbstractClass叫做抽象模板， 它的方法分为两类：
    ● 基本方法
    基本方法也叫做基本操作， 是由子类实现的方法， 并且在模板方法被调用。
    ● 模板方法可以有一个或几个， 一般是一个具体方法， 也就是一个框架， 实现对基本方法的调度，
    完成固定的逻辑。

    ####################
    注意 为了防止恶意的操作， 一般模板方法都加上final关键字， 不允许被覆写。
    ####################


    抽象模板中的基本方法尽量设计为protected类型， 符合迪米特法则， 不需要暴露
    的属性或方法尽量不要设置为protected类型。 实现类若非必要， 尽量不要扩大父类中的访问
    权限。



优点：

    封装不变部分， 扩展可变部分
    把认为是不变部分的算法封装到父类实现， 而可变部分的则可以通过继承来继续扩展。
    在悍马模型例子中， 是不是就非常容易扩展？ 例如增加一个H3型号的悍马模型， 很容易
    呀， 增加一个子类， 实现父类的基本方法就可以了。
    ● 提取公共部分代码， 便于维护
    我们例子中刚刚走过的弯路就是最好的证明， 如果我们不抽取到父类中， 任由这种散乱
    的代码发生， 想想后果是什么样子？ 维护人员为了修正一个缺陷， 需要到处查找类似的代
    码！
    ● 行为由父类控制， 子类实现
    基本方法是由子类实现的， 因此子类可以通过扩展的方式增加相应的功能， 符合开闭原
    则


钩子方法：

    有了钩子方法模板方法模式才算完美， 大家
    可以想想， 由子类的一个方法返回值决定公共部分的执行结果， 是不是很有吸引力呀！






















