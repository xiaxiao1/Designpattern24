



Convert the interface of a class into another interface clients expect.Adapter lets classes work
together that couldn't otherwise because of incompatible interfaces.（将一个类的接口变换成客户
端所期待的另一种接口， 从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工
作。 ）

目标角色是一个已经在正式运行的角色， 你不可能去修改角色中的方法， 你能做的就是
如何去实现接口中的方法， 而且通常情况下， 目标角色是一个接口或者是抽象类， 一般不会
是实现类。


优点：

适配器模式可以让两个没有任何关系的类在一起运行， 只要适配器这个角色能够搞定
他们就成。
● 增加了类的透明性
想想看， 我们访问的Target目标角色， 但是具体的实现都委托给了源角色， 而这些对高
层次模块是透明的， 也是它不需要关心的。
● 提高了类的复用度
当然了， 源角色在原有的系统中还是可以正常使用， 而在目标角色中也可以充当新的演
员。
● 灵活性非常好
某一天， 突然不想要适配器， 没问题， 删除掉这个适配器就可以了， 其他的代码都不用
修改， 基本上就类似一个灵活的构件， 想用就用， 不想就卸载



    适配器模式最好在详细设计阶段不要考虑它， 它不是为了解决还处在开发阶段的问题，
    而是解决正在服役的项目问题，



    项目中的测试代码是类适配器模式   ，直接针对对象的是 对象适配器模式，
    一般对象适配器模式使用的较多，，，就是一个类中包含了各个需要的源对象 作为变量，计算后输出



















