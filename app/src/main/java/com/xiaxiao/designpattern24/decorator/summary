



    装饰模式（Decorator Pattern） 是一种比较常见的模式， 其定义如下： Attach additional
    responsibilities to an object dynamically keeping the same interface.Decorators provide a flexible
    alternative to subclassing for extending functionality.（动态地给一个对象添加一些额外的职责。
    就增加功能来说， 装饰模式相比生成子类更为灵活。 ）

    在装饰模式中， 必然有一个最基本、 最核心、 最原始的接口或抽象类充当
    Component抽象构件。

    原始方法和装饰方法的执行顺序在具体的装饰类是固定的， 可以通过方法重载实
    现多种执行顺序。


优点：
    ● 装饰类和被装饰类可以独立发展， 而不会相互耦合。 换句话说， Component类无须知
    道Decorator类， Decorator类是从外部来扩展Component类的功能， 而Decorator也不用知道具
    体的构件。
    ● 装饰模式是继承关系的一个替代方案。 我们看装饰类Decorator， 不管装饰多少层， 返
    回的对象还是Component， 实现的还是is-a的关系。
    ● 装饰模式可以动态地扩展一个实现类的功能， 这不需要多说， 装饰模式的定义就是如
    此。


缺点：
    对于装饰模式记住一点就足够了： 多层的装饰是比较复杂的。 为什么会复杂呢？ 你想想
    看， 就像剥洋葱一样， 你剥到了最后才发现是最里层的装饰出现了问题， 想象一下工作量
    吧， 因此， 尽量减少装饰类的数量， 以便降低系统的复杂度。


适用场景：
        ● 需要扩展一个类的功能， 或给一个类增加附加功能。
        ● 需要动态地给一个对象增加功能， 这些功能可以再动态地撤销。
        ● 需要为一批的兄弟类进行改装或加装功能， 当然是首选装饰模式。